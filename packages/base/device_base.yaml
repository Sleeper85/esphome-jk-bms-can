# Updated : 2024.08.28
# Version : 1.4.4
# GitHub  : https://github.com/Sleeper85/esphome-yambms

# YamBMS ( Yet another multi-BMS Merging Solution )

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

substitutions:
  yambms_version: "1.4.4"

esphome:
  name: ${name}
  # friendly_name: ${name}
  # comment: 'Solar system braining and more !'
  # area: 'Technical local'
  project:
    name: Sleeper85.YamBMS
    version: ${yambms_version}
  min_version: 2024.6.0

time:
  # https://esphome.io/components/time/homeassistant
  # https://esphome.io/components/time/sntp
  - platform: sntp # homeassistant
    id: my_time

button:
  # https://esphome.io/components/button/restart
  - platform: restart
    name: ${name} ESP32 Restart
    entity_category: config

binary_sensor:
  # https://esphome.io/components/binary_sensor/status  
  - platform: status
    name: ${name} ESP32 Online Status
    id: esp32_online_status
    entity_category: diagnostic

sensor:
  # https://esphome.io/components/sensor/uptime
  - platform: uptime
    id: esp32_uptime_sec
    update_interval: 10s
    internal: true

  # https://esphome.io/components/sensor/wifi_signal 
  - platform: wifi_signal
    name: ${name} ESP32 WiFi power
    id: esp32_wifi_power
    update_interval: 10s
    entity_category: diagnostic

  - platform: copy # Reports the WiFi signal strength in %
    source_id: esp32_wifi_power
    name: ${name} ESP32 WiFi power (%)
    id: esp32_wifi_power_percent
    unit_of_measurement: '%'
    entity_category: diagnostic
    filters:
      - lambda: 'return min(max(2 * (x + 100.0), 0.0), 100.0);'

  # https://esphome.io/components/sensor/internal_temperature
  - platform: internal_temperature
    name: ${name} ESP32 internal temperature
    id: esp32_internal_temperature
    update_interval: 10s
    entity_category: diagnostic

text_sensor:
  # Uptime Human Readable
  - platform: template
    name: ${name} ESP32 Uptime
    id: esp32_uptime
    update_interval: 10s
    icon: mdi:clock-start
    entity_category: diagnostic
    lambda: |-
      int uptime_sec = id(esp32_uptime_sec).state;
      int days = uptime_sec / 86400;
      int hours = (uptime_sec % 86400) / 3600;
      int minutes = (uptime_sec % 3600) / 60;
      int seconds = uptime_sec % 60;
      return {
        (
          (days ? std::to_string(days) +"d " : "") +
          (hours ? std::to_string(hours) +"h " : "") +
          (minutes ? std::to_string(minutes) +"m " : "") +
          (std::to_string(seconds) +"s")
        ).c_str()
      };

  # Now date and time
  - platform: template
    name: ${name}_esp32_date_time_now
    id: esp32_date_time_now
    update_interval: 10s
    icon: mdi:clock-start
    entity_category: diagnostic
    internal: true
    lambda: return id(my_time).now().strftime("%Y-%m-%d %H:%M:%S");

  # https://esphome.io/components/text_sensor/wifi_info
  - platform: wifi_info
    ip_address:
      name: ${name} ESP32 IP address
      id: esp32_ip_address
    ssid:
      name: ${name} ESP32 connected SSID
      id: esp32_connected_ssid
    bssid:
      name: ${name} ESP32 connected BSSID
      id: esp32_connected_bssid
    mac_address:
      name: ${name} ESP32 MAC WiFi address
      id: esp32_mac_wifi_address
    scan_results:
      name: ${name} ESP32 latest scan results
      id: esp32_latest_scan_results
    dns_address:
      name: ${name} ESP32 DNS address
      id: esp32_dns_address

  # https://esphome.io/components/text_sensor/version
  - platform: version
    name: ${name} ESP32 ESPHome version
    id: esp32_esphome_version
    hide_timestamp: false #true
    entity_category: diagnostic
