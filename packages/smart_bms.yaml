# Version : 2024.04.01

# This YAML is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

# +--------------------------------------+
# | Packages                             |
# +--------------------------------------+
packages:
  smart_bms_combine: !include smart_bms_combine.yaml
  # If not necessary, the following packages can be commented out
  # smart_bms_auto_cvl: !include smart_bms_auto_cvl.yaml
  # smart_bms_auto_ccl: !include smart_bms_auto_ccl.yaml
  # smart_bms_auto_dcl: !include smart_bms_auto_dcl.yaml

substitutions:
  # +----------------------------------------------------------------+
  # Information from the EVE LF280K v2 cell datasheet
  # LFP Recommended Operating Temperature Range : 10~45°C
  # Number of cycles at 25°C : 6000
  # Number of cycles at 45°C : 2500
  # 60°C  : Never charging or discharging
  # 0°C   : Never charging
  # -30°C : Never discharging
  # +----------------------------------------------------------------+
  # Over Temp Protection, Temp > OTP = Stop Charging and Discharging
  smart_bms_otp: "45.0"
  # Under Temp Protection, Temp < UTP = Stop Charging
  smart_bms_utp: "1.0"

esphome:
  on_boot:
    then:
      - switch.turn_on: ${smart_bms_id}_switch_charging
      - switch.turn_on: ${smart_bms_id}_switch_discharging
      - switch.turn_on: ${smart_bms_id}_switch_float

globals:
  - id: ${smart_bms_id}_charge_status
    type: std::string
    restore_value: no
    initial_value: '"Wait"'
  - id: ${smart_bms_id}_alarm_status
    type: std::string
    restore_value: no
    initial_value: '"NoAlarm"'
  - id: ${smart_bms_id}_auto_cvl
    type: float
    restore_value: no
    initial_value: '-1.0'
  - id: ${smart_bms_id}_auto_ccl
    type: float
    restore_value: no
    initial_value: '-1.0'
  - id: ${smart_bms_id}_auto_dcl
    type: float
    restore_value: no
    initial_value: '-1.0'
  - id: ${smart_bms_id}_eoc
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ${smart_bms_id}_eoc_timestamp
    type: time_t
    restore_value: true
    initial_value: ''

switch:
  - platform: template
    name: "${smart_bms_name} Charge enabled"
    id: ${smart_bms_id}_switch_charging
    optimistic: true
  - platform: template
    name: "${smart_bms_name} Discharge enabled"
    id: ${smart_bms_id}_switch_discharging
    optimistic: true
  - platform: template
    name: "${smart_bms_name} Force Bulk (top bal)"
    id: ${smart_bms_id}_switch_force_bulk
    optimistic: true
  - platform: template
    name: "${smart_bms_name} Float charge enabled"
    id: ${smart_bms_id}_switch_float
    optimistic: true

number:
  # +--------------------------------------+
  # | Slider / Box                         |
  # +--------------------------------------+
  - platform: template
    name: "${smart_bms_name} Bulk voltage"
    id: "${smart_bms_id}_bulk_voltage"
    step: 0.1
    min_value: 54.0
    max_value: 58.4
    restore_value: true
    mode: "${smart_bms_input_number_mode}"
    initial_value: "${smart_bms_bulk_v}"
    unit_of_measurement: V
    icon: mdi:battery-charging
    optimistic: true
    entity_category: config
  - platform: template
    name: "${smart_bms_name} Float voltage"
    id: "${smart_bms_id}_float_voltage"
    step: 0.1
    min_value: 52.8
    max_value: 58.4
    restore_value: true
    mode: "${smart_bms_input_number_mode}"
    initial_value: "${smart_bms_float_v}"
    unit_of_measurement: V
    icon: mdi:battery-charging
    optimistic: true
    entity_category: config
  - platform: template
    name: "${smart_bms_name} Rebulk V."
    id: "${smart_bms_id}_rebulk_voltage"
    step: 0.1
    min_value: 51.2
    max_value: 53.6
    restore_value: true
    mode: "${smart_bms_input_number_mode}"
    initial_value: "${smart_bms_rebulk_v}"
    unit_of_measurement: V
    icon: mdi:sine-wave
    optimistic: true
    entity_category: config
  - platform: template
    name: "${smart_bms_name} Absorption Offset V."
    id: "${smart_bms_id}_absorption_offset"
    step: 0.05
    min_value: 0
    max_value: 0.3
    restore_value: true
    mode: "${smart_bms_input_number_mode}"
    initial_value: 0.1
    unit_of_measurement: V
    icon: mdi:sine-wave
    optimistic: true
    entity_category: config
  - platform: template
    name: "${smart_bms_name} Charging current max"
    id: "${smart_bms_id}_charging_current"
    step: 1
    min_value: 0
    max_value: "${smart_bms_charge_a}"
    restore_value: true
    mode: "${smart_bms_input_number_mode}"
    initial_value: "${smart_bms_charge_a}"
    unit_of_measurement: A
    icon: mdi:current-dc
    optimistic: true
    entity_category: config
  - platform: template
    name: "${smart_bms_name} Discharging current max"
    id: "${smart_bms_id}_discharging_current"
    step: 1
    min_value: 0
    max_value: "${smart_bms_discharge_a}"
    restore_value: true
    mode: "${smart_bms_input_number_mode}"
    initial_value: "${smart_bms_discharge_a}"
    unit_of_measurement: A
    icon: mdi:current-dc
    optimistic: true
    entity_category: config

sensor:
  # +--------------------------------------+
  # | Last Complete Charge                 |
  # +--------------------------------------+
  - platform: template
    name: "${smart_bms_name} Last Complete Charge"
    device_class: timestamp
    id: ${smart_bms_id}_eoc_timestamp_template
    lambda: return id(${smart_bms_id}_eoc_timestamp);
    on_value:
      then:
        - text_sensor.template.publish:
            id: ${smart_bms_id}_eoc_timestamp_human
            state: !lambda |-
                   char str[19];
                   strftime(str, sizeof(str), " %H:%M %d %b %Y", localtime(&id(${smart_bms_id}_eoc_timestamp)));
                   return  {str};
    entity_category: diagnostic
  # +--------------------------------------+
  # |  Requested Charge Voltage  (CVL)     |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Requested Charge Voltage
    id: ${smart_bms_id}_requested_charge_voltage
    unit_of_measurement: V
    device_class: voltage
    update_interval: ${smart_bms_update_interval}
    lambda: !lambda |-
            // Bulk
            if (id(${smart_bms_id}_charging_instruction).state == "Bulk"){
              if(id(${smart_bms_id}_auto_cvl) == -1.0) return (id(${smart_bms_id}_bulk_voltage).state + ${smart_bms_inverter_offset_v}); // Auto CVL not used
              else return (id(${smart_bms_id}_auto_cvl) + ${smart_bms_inverter_offset_v});
            }
            // Float
            else if (id(${smart_bms_id}_charging_instruction).state == "Float") return (id(${smart_bms_id}_float_voltage).state + ${smart_bms_inverter_offset_v});
            // Stop Charging
            else return id(${smart_bms_id}_rebulk_voltage).state;
  # +--------------------------------------+
  # |  Requested Charge Current  (CCL)     |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Requested Charge Current
    id: ${smart_bms_id}_requested_charge_current
    unit_of_measurement: A
    device_class: current
    update_interval: ${smart_bms_update_interval}
    lambda: !lambda |-
            // Charging Allowed
            if ((id(${smart_bms_id}_charging_instruction).state == "Bulk") | (id(${smart_bms_id}_charging_instruction).state == "Float")){
              if(id(${smart_bms_id}_auto_ccl) == -1.0) return id(${smart_bms_id}_charging_current).state; // Auto CCL not used
              else return id(${smart_bms_id}_auto_ccl);
            }
            // Stop Charging
            else return 0;
  # +--------------------------------------+
  # |  Requested Discharge Voltage  (DVL)  |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Requested Discharge Voltage
    id: ${smart_bms_id}_requested_discharge_voltage
    unit_of_measurement: V
    device_class: voltage
    update_interval: ${smart_bms_update_interval}
    lambda: return (id(${smart_bms_id}_cell_uvpr).state * id(${smart_bms_id}_cell_count));
  # +--------------------------------------+
  # |  Requested Discharge Current  (DCL)  |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Requested Discharge Current
    id: ${smart_bms_id}_requested_discharge_current
    unit_of_measurement: A
    device_class: current
    update_interval: ${smart_bms_update_interval}
    lambda: !lambda |-
            // Discharging Allowed
            if (id(${smart_bms_id}_discharging_instruction).state == true){
              if(id(${smart_bms_id}_auto_dcl) == -1.0) return id(${smart_bms_id}_discharging_current).state; // Auto DCL not used
              else return id(${smart_bms_id}_auto_dcl);
            }
            // Stop Discharging
            else return 0;
  # +--------------------------------------+
  # | Battery module                       |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Battery module
    id: ${smart_bms_id}_battery_module
    device_class: battery
    update_interval: ${smart_bms_update_interval}
    lambda: !lambda |-
            int batt_capacity = id(${smart_bms_id}_battery_capacity).state;
            int batt_module;
            if (batt_capacity <= 100) batt_module = 1;
            else if (batt_capacity <= 200) batt_module = 2;
            else if (batt_capacity <= 300) batt_module = 3;
            else if (batt_capacity <= 400) batt_module = 4;
            else if (batt_capacity <= 500) batt_module = 5;
            else if (batt_capacity <= 600) batt_module = 6;
            else if (batt_capacity <= 700) batt_module = 7;
            else batt_module = 8;
            return batt_module;
  # +--------------------------------------+
  # | Battery State of Charge (SOC)        |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Battery SOC
    id: ${smart_bms_id}_battery_soc
    unit_of_measurement: "%"
    device_class: battery
    update_interval: ${smart_bms_update_interval}
    lambda: !lambda |-
            if (id(${smart_bms_id}_state_of_charge).state < 100) return id(${smart_bms_id}_state_of_charge).state;      // SOC < 100% => Sending BMS SOC
            else if (id(${smart_bms_id}_eoc) == true) return 100;                                       // End Of Charge => Sending 100%
            else return 99;                                                             // Otherwise => Sending 99%
  # +--------------------------------------+
  # | Battery State of Health (SOH)        |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Battery SOH
    id: ${smart_bms_id}_battery_soh
    unit_of_measurement: "%"
    device_class: battery
    update_interval: ${smart_bms_update_interval}
    lambda: return round(((id(${smart_bms_id}_charging_cycles).state/${smart_bms_max_cycles})-1)*-100);

text_sensor:
  # +--------------------------------------+
  # | Last Complete Charge                 |
  # +--------------------------------------+
  - platform: template
    name: ${smart_bms_name} Last Complete Charge Human Readable
    id: ${smart_bms_id}_eoc_timestamp_human
    icon: mdi:clock-start
    entity_category: diagnostic
  # +--------------------------------------+
  # | ****** Cut-off Charging Logic ****** |
  # | ********* Charging  Status ********* |
  # +--------------------------------------+
  - platform: template
    name: "${smart_bms_name} Charging Status"
    id: ${smart_bms_id}_charging_status
    update_interval: ${smart_bms_update_interval}
    lambda: !lambda |-
            // +-----------------------------------------------+
            // | Cut-off Charging Logic                        |
            // +-----------------------------------------------+
            
            // Warning : information from JK BMS is not available immediately after boot
            
            // JK-BMS Alarm !
            if (id(bms1_errors_bitmask).state > 1) id(${smart_bms_id}_charge_status) = "Alarm";
            // JK-BMS Alarm ended
            else if ((id(${smart_bms_id}_charge_status) == "Alarm") & (id(bms1_errors_bitmask).state < 2)) {
              if (id(${smart_bms_id}_eoc) == true) id(${smart_bms_id}_charge_status) = "EOC";
              else id(${smart_bms_id}_charge_status) = "Wait";
            }
            // Float
            else if ((id(${smart_bms_id}_charge_status) == "EOC") & (id(${smart_bms_id}_switch_float).state)) id(${smart_bms_id}_charge_status) = "Float";
            // No Float => EOC
            else if ((id(${smart_bms_id}_charge_status) == "Float") & (!id(${smart_bms_id}_switch_float).state)) id(${smart_bms_id}_charge_status) = "EOC";
            // No Force Bulk => Wait
            else if ((id(${smart_bms_id}_charge_status) == "Force Bulk") & (!id(${smart_bms_id}_switch_force_bulk).state)) id(${smart_bms_id}_charge_status) = "Wait";
            // No Balancing => Wait
            else if ((id(${smart_bms_id}_charge_status) == "Balancing") & (!id(bms1_switch_balancing).state)) id(${smart_bms_id}_charge_status) = "Wait";
            
            // +-----------------------------------------------+
            // | Charge ON : BMS and CAN charging switch is ON |
            // +-----------------------------------------------+
            else if ((id(${smart_bms_id}_switch_charging).state) & (id(${smart_bms_id}_switch_charging).state)) {
            
              // Variables
              float cell_bulk_v = (id(${smart_bms_id}_bulk_voltage).state / id(${smart_bms_id}_cell_count));
              float cell_rebulk_v = (id(${smart_bms_id}_rebulk_voltage).state / id(${smart_bms_id}_cell_count));
              float cell_absorption_offset_v = (id(${smart_bms_id}_absorption_offset).state / id(${smart_bms_id}_cell_count));
              
              // Force Bulk Logic
              if (id(${smart_bms_id}_switch_force_bulk).state) {
                // Stop Force Bulk when cells equalizing (charging ends when cells are equalized)
                if (id(${smart_bms_id}_equalizing).state) {
                  id(${smart_bms_id}_charge_status) = "Balancing";
                  id(${smart_bms_id}_switch_force_bulk).turn_off();
                }
                // Force Bulk
                else id(${smart_bms_id}_charge_status) = "Force Bulk";
              }
              
              // Rebulk Logic (eg: Max Cell V. <= 3.3V)
              else if (id(${smart_bms_id}_max_cell_voltage).state <= cell_rebulk_v) id(${smart_bms_id}_charge_status) = "Bulk";
              
              // Charging Logic
              else if ((id(${smart_bms_id}_charge_status) == "Wait") | (id(${smart_bms_id}_charge_status) == "Bulk") | (id(${smart_bms_id}_charge_status) == "Force Bulk") | (id(${smart_bms_id}_charge_status) == "Balancing") | (id(${smart_bms_id}_charge_status) == "Absorption")) {
              
                // Charging
                if (id(${smart_bms_id}_current).state >= 0) {
                  
                  float cv_min = ${smart_bms_cutoff_cvmin};
                  float cv_max = ${smart_bms_cutoff_cvmax};
                  float cutoff_current = (id(${smart_bms_id}_battery_capacity).state * 0.05 * (cell_bulk_v - cv_min) / (cv_max - cv_min));
                  float cutoff_voltage = (cv_min + (cv_max - cv_min)/(0.05 + cell_absorption_offset_v) * (id(${smart_bms_id}_current).state / id(${smart_bms_id}_battery_capacity).state));
                  
                  ESP_LOGI("main", "Cut-Off Current : %f", cutoff_current);
                  ESP_LOGI("main", "Cut-Off Voltage : %f", cutoff_voltage);
                
                  // Stop Charging
                  if ((id(${smart_bms_id}_current).state <= cutoff_current) & (id(${smart_bms_id}_max_cell_voltage).state >= cutoff_voltage)) {
                  
                    // End Of Charge
                    if ((!id(${smart_bms_id}_equalizing).state)) id(${smart_bms_id}_charge_status) = "EOC";
                  
                  }
                  // Start Charging
                  else {
                    
                    // With the "Auto Charge Current Control", the current is reduced automatically if "max_cell_voltage" approaches BMS OVPR
                    
                    // Balancing : the BMS is equalizing the cells
                    if (id(${smart_bms_id}_equalizing).state) id(${smart_bms_id}_charge_status) = "Balancing";
                    // Absorption : Max Cell V. >= Cell Absorption V.
                    else if (id(${smart_bms_id}_max_cell_voltage).state >= (cell_bulk_v - cell_absorption_offset_v)) id(${smart_bms_id}_charge_status) = "Absorption";
                    // Bulk
                    else id(${smart_bms_id}_charge_status) = "Bulk";
                
                  }
                }
                // Discharging (!= "EOC" | != "Float")
                else if (id(${smart_bms_id}_max_cell_voltage).state < (cell_bulk_v - cell_absorption_offset_v)) id(${smart_bms_id}_charge_status) = "Bulk";
              }
            }
            // Charge OFF
            else id(${smart_bms_id}_charge_status) = "Wait";
            
            ESP_LOGI("main", "Charge Status : %s", id(${smart_bms_id}_charge_status).c_str());
            return id(${smart_bms_id}_charge_status);
  # +--------------------------------------+
  # | Charging Instruction                 |
  # +--------------------------------------+
  - platform: template
    name: "${smart_bms_name} Charging Instruction"
    id: ${smart_bms_id}_charging_instruction
    update_interval: ${smart_bms_update_interval}
    lambda: !lambda |-
            // Alarm > Stop Charging
            if ((id(${smart_bms_id}_alarm_status) == "OVP") | (id(${smart_bms_id}_alarm_status) == "UTP") | (id(${smart_bms_id}_alarm_status) == "COCP") | (id(${smart_bms_id}_alarm_status) == "OTP") | (id(${smart_bms_id}_alarm_status) == "BMS")){
              return {"Stop"};
            }
            // Bulk Charge
            else if ((id(${smart_bms_id}_charge_status) == "Bulk") | (id(${smart_bms_id}_charge_status) == "Force Bulk") | (id(${smart_bms_id}_charge_status) == "Balancing") | (id(${smart_bms_id}_charge_status) == "Absorption")) {
              id(${smart_bms_id}_eoc) = false;                                        // SOC 100% can't be sent
              return {"Bulk"};
            }
            // Float Charge
            else if (id(${smart_bms_id}_charge_status) == "Float") {
              return {"Float"};
            }
            // End Of Charge (EOC) > Stop Charging
            else if (id(${smart_bms_id}_charge_status) == "EOC") {
              id(${smart_bms_id}_eoc) = true;                                         // SOC 100% can be sent
              id(${smart_bms_id}_eoc_timestamp) = id(sntp_time).utcnow().timestamp;   // Store charge completion timestamp
              return {"Stop"};
            }
            // Wait
            else return {"Stop"};
  # +--------------------------------------+
  # | Smart BMS Alarm Logic                |
  # +--------------------------------------+
  - platform: template
    name: "${smart_bms_name} Alarm"
    id: ${smart_bms_id}_smart_bms_alarm
    update_interval: ${smart_bms_update_interval}
    entity_category: diagnostic
    lambda: !lambda |-
            // Over Temp Protection > Stop Charging and Discharging
            if (max(id(${smart_bms_id}_temperature_sensor_1).state, id(${smart_bms_id}_temperature_sensor_2).state) > ${smart_bms_otp}){
              id(${smart_bms_id}_alarm_status) = "OTP";
            }
            // Under Temp Protection > Stop Charging
            else if (min(id(${smart_bms_id}_temperature_sensor_1).state, id(${smart_bms_id}_temperature_sensor_2).state) < ${smart_bms_utp}){
              id(${smart_bms_id}_alarm_status) = "UTP";
            }
            ESP_LOGI("main", "Alarm Status : %s", id(${smart_bms_id}_alarm_status).c_str());
            return id(${smart_bms_id}_alarm_status);

binary_sensor:
  # +--------------------------------------+
  # | Discharging Instruction              |
  # +--------------------------------------+
  - platform: template
    name: "${smart_bms_name} Discharging Instruction"
    id: ${smart_bms_id}_discharging_instruction
    lambda: !lambda |-
            // Alarm > Stop Discharging
            if ((id(${smart_bms_id}_alarm_status) == "UVP") | (id(${smart_bms_id}_alarm_status) == "DOCP") | (id(${smart_bms_id}_alarm_status) == "OTP") | (id(${smart_bms_id}_alarm_status) == "BMS")) return false;
            // BMS or ESP32 switch is OFF > Stop Discharging
            else if ((!id(${smart_bms_id}_switch_discharging).state) | (!id(${smart_bms_id}_switch_discharging).state)) return false;
            // Battery voltage is low > Stop Discharging
            else if (id(${smart_bms_id}_total_voltage).state <= id(${smart_bms_id}_requested_discharge_voltage).state) return false;
            // Discharging Allowed
            else return true;
          
